---
import '@/styles/global.css';
import { getClientInitializeValues, getStatsigUser } from '@/lib/statsig-server';
import { getEnvironment, getGAMeasurementId } from '@/lib/analytics';
import CookieBanner from '@/components/CookieBanner.astro';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = 'Engage by Lexara - Transform your customer engagement' } = Astro.props;

let initializeValues = {};
let statsigUser = null;

try {
  initializeValues = await getClientInitializeValues(Astro);
  statsigUser = await getStatsigUser(Astro);
} catch (error) {
  console.warn('Statsig initialization skipped:', error);
  // Use fallback values for CloudFlare Workers
  statsigUser = { userID: `anon-${crypto.randomUUID()}` };
}

// Determine environment for analytics
const environment = getEnvironment(Astro.url.hostname);
const gaMeasurementId = getGAMeasurementId();
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap" rel="stylesheet">
    <title>{title} | Engage by Lexara</title>

    <!-- Google Analytics -->
    <script async src={`https://www.googletagmanager.com/gtag/js?id=${gaMeasurementId}`}></script>
    <script define:vars={{ gaMeasurementId, environment }}>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      // Configure GA with environment as custom dimension
      gtag('config', gaMeasurementId, {
        'custom_map': {
          'dimension1': 'environment'
        },
        'environment': environment,
        'send_page_view': true
      });

      // Set environment as a user property for all events
      gtag('set', 'user_properties', {
        'environment': environment
      });
    </script>

    <script define:vars={{ statsigUser, initializeValues, clientKey: import.meta.env.PUBLIC_STATSIG_CLIENT_KEY }}>
      window.__STATSIG_USER__ = statsigUser;
      window.__STATSIG_INIT_VALUES__ = initializeValues;
      window.__STATSIG_CLIENT_KEY__ = clientKey;
    </script>
    <style>
      /* Critical CSS for layout and header */
      .container{width:100%;margin-left:auto;margin-right:auto;padding-left:1rem;padding-right:1rem}
      .hidden{display:none}
      .flex{display:flex}
      .items-center{align-items:center}
      .justify-between{justify-content:space-between}
      .space-x-8>:not([hidden])~:not([hidden]){margin-left:2rem}
      .space-x-4>:not([hidden])~:not([hidden]){margin-left:1rem}
      .text-sm{font-size:.875rem;line-height:1.25rem}
      .font-medium{font-weight:500}
      .text-gray-700{color:#374151}
      .text-gray-900{color:#111827}
      .hover\:text-gray-900:hover{color:#111827}
      .bg-white{background-color:#fff}
      .border-b{border-bottom-width:1px}
      .border-gray-200{border-color:#e5e7eb}
      .h-16{height:4rem}
      .h-8{height:2rem}
      .px-4{padding-left:1rem;padding-right:1rem}
      .py-2{padding-top:.5rem;padding-bottom:.5rem}
      .rounded{border-radius:.25rem}
      .bg-lexara-mahogany{background-color:#76444b}
      .text-white{color:#fff}
      .hover\:bg-opacity-90:hover{background-color:rgba(118,68,75,.9)}
      @media (min-width: 768px){.md\:flex{display:flex}.md\:hidden{display:none}}
    </style>
  </head>
  <body class="min-h-screen bg-white text-gray-900">
    <slot />
    <CookieBanner />
    <script is:inline>
      // Load Statsig from CDN
      (function() {
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/@statsig/js-client@3/build/statsig-js-client.min.js';
        script.async = true;
        script.onload = function() {
          console.log('Statsig library loaded');
        };
        document.head.appendChild(script);
      })();
    </script>
    <script is:inline>
      // Initialize Statsig analytics
      (function() {
        let statsigClient = null;
        
        // Define analytics functions globally
        window.logEvent = function(eventName, value, metadata) {
          if (statsigClient) {
            statsigClient.logEvent(eventName, value, metadata);
          }
        };
        
        window.logPageView = function(pageName, metadata) {
          if (statsigClient) {
            const enrichedMetadata = {
              ...metadata,
              url: window.location.href,
              path: window.location.pathname,
              referrer: document.referrer,
              timestamp: new Date().toISOString(),
            };
            statsigClient.logEvent('page_view', pageName, enrichedMetadata);
          }
        };
        
        window.logClick = function(elementName, metadata) {
          if (statsigClient) {
            statsigClient.logEvent('click', elementName, metadata);
          }
        };
        
        window.logConversion = function(conversionType, value, metadata) {
          if (statsigClient) {
            statsigClient.logEvent('conversion', conversionType, {
              ...metadata,
              value,
            });
          }
        };
        
        function initializeAnalytics() {
          if (window.__STATSIG_CLIENT_KEY__ && window.StatsigClient) {
            const consent = window.checkCookieConsent?.();
            
            // Only initialize analytics if we have consent
            if (consent?.allowsAnalytics) {
              statsigClient = new window.StatsigClient(
                window.__STATSIG_CLIENT_KEY__,
                window.__STATSIG_USER__,
                {
                  initializeValues: window.__STATSIG_INIT_VALUES__ || {},
                  environment: { tier: 'production' }
                }
              );
              
              statsigClient.initializeAsync().then(() => {
                console.log('Statsig initialized successfully');
                
                // Log initial page view
                const pageTitle = document.title.split('|')[0].trim();
                window.logPageView(pageTitle, {
                  utm_source: new URLSearchParams(window.location.search).get('utm_source'),
                  utm_campaign: new URLSearchParams(window.location.search).get('utm_campaign'),
                  utm_medium: new URLSearchParams(window.location.search).get('utm_medium'),
                });
              }).catch(err => {
                console.error('Statsig initialization error:', err);
              });
            }
          }
        }
        
        // Wait for Statsig library to load
        function waitForStatsig() {
          if (window.StatsigClient) {
            // Initialize immediately if consent already given
            if (window.checkCookieConsent?.()?.allowsAnalytics) {
              initializeAnalytics();
            }
            
            // Listen for consent updates
            window.addEventListener('cookieConsentUpdate', function(event) {
              if (event.detail.consent === 'all') {
                initializeAnalytics();
              }
            });
          } else {
            setTimeout(waitForStatsig, 100);
          }
        }
        
        // Start waiting after DOM is ready
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', waitForStatsig);
        } else {
          waitForStatsig();
        }
      })();
    </script>
  </body>
</html>